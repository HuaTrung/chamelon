{"version":3,"sources":["components/Splash.js","objects/io.js","objects/game.js","objects/player.js","components/CreateGame.js","components/JoinGame.js","components/Lobby.js","components/Chat.js","components/Round.js","components/Clue.js","components/Vote.js","components/Results.js","components/AskingName.js","App.js","serviceWorker.js","index.js"],"names":["Splash","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","joinGame","renderPage","newGame","react_default","a","createElement","className","name","onClick","Component","IO","db","code","createClass","key","value","_emit","asyncToGenerator","regenerator_default","mark","_callee","data","wrap","_context","prev","next","setDoc","doc","Date","getTime","stop","_x","_x2","apply","arguments","Game","voteTime","turnTime","topicSelected","len","charset","i","charAt","Math","floor","random","length","toUpperCase","generateCode","players","chat","turn","status","events","io","array","j","_ref","player","push","to","emit","toJSON","jsonedObject","x","splice","indexOf","map","isHost","socket","id","topic","undefined","console","log","forEach","isChameleon","wordGiven","votedFor","chameleon","filter","topicObj","toLowerCase","secretWord","words","join","concat","shuffle","playerType","playerTurn","seconds","_this2","timerInterval","setInterval","author","content","clearInterval","endTurn","socketId","startTimer","startVote","_this3","answers","answer","submittedWord","evaluateVotes","ids","_this4","_this5","votes","counts","playerName","vote","object","winner","keys","max","values","winningPlayer","getPlayerById","leave","tieBreaker","Player","player_id","points","word","CreateGame","back","createGame","e","game","json","preventDefault","state","playerJoin","changeName","setState","target","changeTopic","changeTurnTimer","changeVotingTime","topics","onChange","type","fetch","sort","unshift","JoinGame","body","options","jsonGame","current","method","JSON","stringify","headers","Content-Type","sent","setCode","setMessage","message","forceUpper","React","createRef","maxLength","ref","Lobby","leaveGame","startGame","Chat","sendMessage","messageContent","scrollToBottom","chatEnd","scrollIntoView","behavior","prevProps","messages","style","color","el","placeholder","Round","submitWord","clue","currentTurn","timer","isMyTurn","Chat_Chat","Clue","selectClue","clueSelected","selectedClue","Vote","toggleVote","showVote","placeVote","playerAnswers","playerId","Clue_Clue","Fragment","Results","voteCorrect","AskingName","login","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","navigator","vibrate","webkitVibrate","mozVibrate","msVibrate","getCookie","cname","ca","decodeURIComponent","document","cookie","split","c","substring","setCookie","cvalue","exdays","d","setTime","expires","toUTCString","App","createAlert","toConsumableArray","initSocket","onSnapshot","event1","rendered","showAlert","alert","selectedTopic","page","id_chamelon","new_id","docRef","getDoc","docSnap","exists","AskingName_AskingName","Splash_Splash","CreateGame_CreateGame","setHost","JoinGame_JoinGame","Lobby_Lobby","Round_Round","Vote_Vote","Results_Results","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.288eba73.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nimport './Splash.css';\n\nexport default class Splash extends Component {\n\n    constructor(props) {\n        super(props);\n\n     \n    }\n    joinGame = () => {\n        this.props.renderPage('join');\n    }\n\n    newGame = () => {\n        this.props.renderPage('create');\n    }\n    render() {\n        return (\n            <div>\n                <div className=\"main-container --splash\">\n                    <div className=\"brand\">\n                        <h1>Chameleon</h1>\n                    </div>\n                    <div className=\"button-group\">\n                    <div>\n                                <label>Name: {this.props.name} </label>\n                            </div>\n                        <button className=\"button--default\" onClick={this.joinGame}>Join Game</button>\n                        <button className=\"button--default\" onClick={this.newGame}>New Game</button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n","import { doc, setDoc } from \"firebase/firestore\"; \n\n\nexport class IO {\n    constructor(db) {\n        this.db = db\n        this.code=null\n    }\n\n    to(code){\n        this.code=code\n        return this\n    }\n\n    async emit(name, data){\n        await setDoc(doc(this.db, \"rooms/\"+this.code+\"/events\", (new Date()).getTime()), {\n            name: name,\n            data: data\n          });\n          \n    }\n}","\nimport {IO} from './io'\n\nfunction generateCode(len) {\n    let code = \"\";\n\n    const charset = \"abcdefghijklmnopqrstuvwxyz\";\n\n    for (var i = 0; i < len; i++) {\n        code += charset.charAt(Math.floor(Math.random() * charset.length));\n    }\n    return code.toUpperCase();\n}\nvar io = null\nvar games = null\nvar uuid =null\nvar topics =null\nexport class Game {\n    constructor(voteTime, turnTime, topicSelected,db) {\n        this.code = generateCode(4);\n        this.players = [];\n        this.chat = [];\n        this.turn = 0;\n        this.status = 'lobby';\n        this.events = []\n        this.io = new IO(db)\n        this.voteTime = voteTime || 30;\n        this.turnTime = turnTime || 30;\n        this.topicSelected = topicSelected || 'random';\n    }\n\n    shuffle(array) {\n        for (let i = array.length - 1; i > 0; i--) {\n            let j = Math.floor(Math.random() * (i + 1));\n            [array[i], array[j]] = [array[j], array[i]];\n        }\n    }\n\n    // Join a player to this game\n    playerJoin(player) {\n        this.players.push(player);\n        //update lobby with player names\n        this.io.to(this.code).emit('update players', player.toJSON());\n    };\n\n    toJSON() {\n        var jsonedObject = {};\n        for (var x in this) {\n\n            if (x === \"toJSON\" || x === \"constructor\" || x===\"io\") {\n                continue;\n            }\n            jsonedObject[x] = this[x];\n        }\n        return jsonedObject;\n    }\n\n    playerLeave(player) {\n        this.players.splice(this.players.indexOf(player), 1);\n        this.io.to(this.code).emit('update players', this.players.map(player => player.name));\n\n        //If there are no players left in the game, delete it.\n        if(player.isHost) {\n            games.splice(games.indexOf(this), 1)\n            this.io.to(this.code).emit('leave game', 'The host disbanded the game.');\n        }\n    };\n\n    getPlayer(socket) {\n        for(let i = 0; i < this.players.length; i++) {\n            if(this.players[i].socket === socket) {\n                return this.players[i];\n            }\n        }\n    }\n\n    getPlayerById(id) {\n        for(let i = 0; i < this.players.length; i++) {\n            if(this.players[i].id === id) {\n                return this.players[i];\n            }\n        }\n    }\n\n    startRound(topic='') {\n        console.log('Round starting.');\n        this.players.forEach(player => {\n            player.isChameleon = false;\n            player.wordGiven = '';\n            player.votedFor = '';\n        });\n        this.status = 'inProgess';\n        this.turn = 0;\n        this.chameleon = this.players[Math.floor(Math.random() * this.players.length)];\n\n        // Select topic with topic name, or random if topic = \"random\" || falsy\n        if(!topic) {\n            console.log('No topic passed, must be a fresh game.')\n            console.log('Topic selected: ', this.topicSelected);\n            if(!this.topicSelected || this.topicSelected.toLowerCase() === 'random') {\n                console.log('Random topic');\n                this.topic = topics[Math.floor(Math.random() * topics.length)];\n            } else {\n                console.log('Non-random topic');\n                this.topic = topics.filter(topic => topic.topic === this.topicSelected);\n                this.topic = this.topic[0];\n            }\n        } else {\n            console.log('Topic passed, must be a new game from results screen')\n            this.topic = topics.filter(topicObj => topicObj.topic === topic);\n            this.topic = this.topic[0];\n        }\n\n        console.log('Selected Topic: ', this.topicSelected, 'Actual Topic: ', this.topic)\n\n\n        this.secretWord = this.topic.words[Math.floor(Math.random() * this.topic.words.length)];\n        //join chameleon to room-chameleon\n        //join others to room-players\n        this.players.forEach(player => {\n            if(player === this.chameleon) {\n                console.log(player.name + ' is the chameleon.');\n                player.socket.join(`${this.code}-chameleon`);\n            } else {\n                console.log(player.name + ' is a player.');\n                player.socket.join(`${this.code}-players`);\n            }\n        });\n\n        this.shuffle(this.players);\n\n        this.io.to(`${this.code}-chameleon`).emit('game started', {topic: this.topic, playerType: 'chameleon'});\n        this.io.to(`${this.code}-chameleon`).emit('chameleon');\n        this.io.to(`${this.code}-players`).emit('game started', {topic: this.topic, playerType: 'player', secretWord: this.secretWord});\n        this.playerTurn(this.players[this.turn]);\n    };\n\n    startTimer(seconds, player) {\n\n        this.io.to(this.code).emit('update timer', seconds)\n        let countDown = () => {\n            this.io.to(this.code).emit('update timer', seconds)\n            seconds--;\n            if(seconds < 0) {\n                this.io.to(this.code).emit('receive message', {author: 'System', content: `${player.name} failed to give a clue in time.`});\n                clearInterval(this.timerInterval);\n                this.endTurn(player);\n            }\n        };\n        \n        this.timerInterval = setInterval(countDown, 1000)\n    }\n\n    playerTurn(player) {\n        console.log(player.name + \"'s turn\");\n        this.io.to(this.code).emit('receive message', {author: 'System', content: `It is ${player.name}'s turn.`});\n        this.io.to(player.socketId).emit('my turn');\n        this.io.to(this.code).emit('current turn', player.name);\n        this.startTimer(this.turnTime, player);\n    };\n\n    endTurn() {\n        console.log('Turn ended!');\n        clearInterval(this.timerInterval);\n        if(this.turn === this.players.length - 1) {\n            this.io.to(this.players[this.turn].socketId).emit('turn over');\n            console.log('turns are over!');\n            this.startVote();\n        } else {\n            this.io.to(this.players[this.turn].socketId).emit('turn over');\n            this.turn++;\n            this.playerTurn(this.players[this.turn]);\n        }\n    }\n\n    startVote() {\n        let seconds = this.voteTime;\n        const answers = this.players.map(player => {\n            return {id: player.id, name: player.name, answer: player.submittedWord}\n        });\n        console.log(answers);\n        this.io.to(this.code).emit('start vote', answers);\n        this.io.to(this.code).emit('update timer', seconds);\n        let countDown = () => {\n            this.io.to(this.code).emit('update timer', seconds);\n            seconds--;\n            if(seconds < 0) {\n                this.io.to(this.code).emit('vote over');\n                clearInterval(this.timerInterval);\n                this.evaluateVotes();\n            }\n        }\n\n        this.timerInterval = setInterval(countDown, 1000);\n    }\n\n    tieBreaker(ids) {\n        let seconds = 15;\n        const answers = this.players.filter(player => {\n            for(let i = 0; i < ids.length; i++) {\n                if(player.id === ids[i]) {\n                    return player;\n                }\n            }\n        }).map(player => {\n            return {id: player.id, name: player.name, answer: player.submittedWord}\n        });\n        console.log(answers);\n        this.io.to(this.code).emit('tie breaker');\n        this.io.to(this.code).emit('start vote', answers);\n        this.io.to(this.code).emit('update timer', seconds);\n        let countDown = () => {\n            this.io.to(this.code).emit('update timer', seconds);\n            seconds--;\n            if(seconds < 0) {\n                this.io.to(this.code).emit('vote over');\n                clearInterval(this.timerInterval);\n                this.evaluateVotes();\n            }\n        }\n        this.timerInterval = setInterval(countDown, 1000);\n    }\n\n    evaluateVotes() {\n        const votes = [];\n        const counts = {};\n        \n        //Gather our votes\n        this.players.forEach(player => {\n            if(player.votedFor != '') {\n                votes.push({playerName: player.name, vote: player.votedFor});\n            }\n        });\n\n        // Gather our vote count\n        for(let i = 0; i < votes.length; i++) {\n            counts[votes[i].vote] = 1 + (counts[votes[i].vote] || 0);\n        };\n\n        console.log('Votes: ', votes);\n        console.log('Counts: ', counts);\n         \n        //tally up and return the winner\n        const getMax = object => {\n            return Object.keys(object).filter(x => {\n                 return object[x] == Math.max.apply(null, \n                 Object.values(object));\n           });\n        };\n\n        let winner = getMax(counts);\n        console.log('winner: ', winner[0]);\n\n        if(winner.length === 1) {\n            //If we have a clear winner, we're good to go!\n            let winningPlayer = this.getPlayerById(winner[0]);\n            this.io.to(this.code).emit('results', {winningPlayer: winningPlayer.name, chameleon: this.chameleon.name});\n            this.players.forEach(player => {\n                player.socket.leave(`${this.code}-chameleon`);\n                player.socket.leave(`${this.code}-players`);\n            })\n        } else if (winner.length < 1) {\n            //If we have no votes, start the vote process over\n            this.startVote();\n        } else {\n            //If we have a tie, initiatie a tie breaker.\n\n            //Reset the votes\n            // this.players.forEach(player => {\n            //     player.votedFor = '';\n            // });\n            this.io.to(this.code).emit('tie');\n            this.tieBreaker(winner);\n        }\n\n\n    }\n}","export class Player {\n    constructor(name,player_id) {\n        this.player_id=player_id\n        this.name = name;\n        this.isHost = false;\n        this.points = 0;\n        this.isChameleon = false;\n        this.submittedWord = '';\n        this.votedFor = '';\n    }\n\n    vote(player) {\n        this.votedFor = player;\n    };\n\n    submitWord(word) {\n        this.submittedWord = word;\n    };\n    toJSON() {\n        var jsonedObject = {};\n        for (var x in this) {\n\n            if (x === \"toJSON\" || x === \"constructor\" || x===\"io\") {\n                continue;\n            }\n            jsonedObject[x] = this[x];\n        }\n        return jsonedObject;\n    }\n}\n","import React, { Component } from 'react'\n\nimport './CreateGame.css';\nimport {Game} from '../objects/game'\nimport {Player} from '../objects/player'\n\nimport { doc, setDoc } from \"firebase/firestore\"; \nimport { collection, addDoc } from \"firebase/firestore\"; \n\nexport default class CreateGame extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            name: '',\n            topic: '',\n            turnTime: 30,\n            voteTime: 30,\n            topics: [],\n        };\n    }\n    back = () => {\n        this.props.renderPage('splash');\n    }\n\n    createGame = async (e) => {\n        e.preventDefault();\n        let player = new (\"1\",\"2\",\"3\");\n        let game = new Game(this.props.player, 1, 2,3,4,this.props.db);\n        if(this.state.name !== '') {\n            var db = this.props.db;\n            var json = game.toJSON()\n            await setDoc(doc(db, \"rooms\", game.code), \n                json\n            );\n            game.playerJoin(player)\n            this.props.renderPage('lobby');\n        }\n    }\n    \n    render() {\n        return (\n            <div>\n                <div className=\"main-container --create\">\n                    <div className=\"back\" onClick={this.back}></div>\n                    <div className=\"title\">\n                        <h2>Create a Game</h2>\n                    </div>\n                    <form className=\"form-group\">\n                        <div className=\"max-sm\">\n                            <div>\n                                <label>Name</label>\n                                <input value={this.state.name} onChange={this.changeName} />\n                            </div>\n                            <div>\n                                <label>Topic</label>\n                                <select onChange={this.changeTopic}>\n                                    {this.state.topics.map(topic => {\n                                        return (<option value={topic} key={topic}>{topic}</option>);\n                                    })\n                                    }\n                                </select>\n                            </div>\n                            <div>\n                                <label>Turn Timer (seconds)</label>\n                                <input value={this.state.turnTime} type=\"number\" onChange={this.changeTurnTimer} />\n                            </div>\n                            <div>\n                                <label>Voting Time (seconds)</label>\n                                <input value={this.state.voteTime} type=\"number\" onChange={this.changeVotingTime}/>\n                            </div>\n                            <button className=\"button--default\" onClick={this.createGame} type=\"submit\">Create Game</button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        )\n    }\n\n    changeName = e => {\n        this.setState({name: e.target.value});\n    }\n\n    changeTopic = e => {\n        this.setState({topic: e.target.value});\n    }\n\n    changeTurnTimer = e => {\n        this.setState({turnTime: e.target.value});\n    }\n\n    changeVotingTime = e => {\n        this.setState({voteTime: e.target.value});\n    }\n\n    async componentDidMount() {\n        let data = await fetch('/topics');\n        let topics = await data.json();\n        topics.sort();\n        topics.unshift('Random');\n        this.setState({topics});\n    }\n}\n","import React, { Component } from 'react'\n\nimport './CreateGame.css';\n\nexport default class JoinGame extends Component {\n    \n    constructor(props) {\n        super(props);\n\n        this.name = React.createRef();\n        this.code = React.createRef();\n    }\n\n    back = () => {\n        this.props.renderPage('splash');\n    }\n\n    join = async e => {\n        e.preventDefault();\n        let socket = this.props.socket;\n        const body = {name: this.name.current.value, code: this.code.current.value};\n        const options = {\n            method: 'POST',\n            body: JSON.stringify(body),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        };\n        let game = await fetch('/join', options);\n        let jsonGame = await game.json();\n        if(game.status === 200) {\n            this.props.setCode(jsonGame.code);\n            if(this.name.current.value.length > 0 && this.code.current.value.length === 4) {\n                socket.emit('join game', {name: this.name.current.value, code: this.code.current.value.toUpperCase()});\n                this.props.renderPage('lobby');\n            } else {\n                console.log('Nice try!');\n            }\n        } else {\n            this.props.setMessage(jsonGame.message);\n        }\n\n        // \n        // if(this.props.message === 'Game does not exist.') {\n        //     return;\n        // } else {\n        //     this.props.renderPage('lobby');\n        // }\n    }\n\n    forceUpper = () => {\n        this.code.current.value = this.code.current.value.toUpperCase();\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"main-container --join\">\n                    <div className=\"back\" onClick={this.back}></div>\n                    <div className=\"title\">\n                        <h2>Join a Game</h2>\n                    </div>\n                    <form className=\"form-group\">\n                        <label>Name</label>\n                        <input maxLength=\"12\" ref={this.name} />\n                        <label>Game Code</label>\n                        <input maxLength=\"4\" ref={this.code} onChange={this.forceUpper} />\n                        <button className=\"button--default\" onClick={this.join} type=\"submit\">Join Game</button>\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nimport './Lobby.css';\n\nexport default class Lobby extends Component {\n    \n    back = () => {\n        this.props.leaveGame(this.props.socket);\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"main-container --lobby\">\n                    <div className=\"back\" onClick={this.back}></div>\n                    <div className=\"title\">\n                        <h2>Game Code:</h2>\n                        <h1>{this.props.code}</h1>\n                    </div>\n                    <p className=\"lobby__info\">Do not lock your device, or you will be disconnected.</p>\n                    <p className=\"lobby__info\">You need at least 3 players to play.</p>\n                    <div className=\"lobby__players\">\n                        <h2>{`${this.props.players.length} of 8 players.`}</h2>\n                        {this.props.players.map(player => {\n                                return (<h2 key={player.id}>{player}</h2>)\n                            }\n                        )}\n                    </div>\n                    {this.props.isHost &&\n                    <div className=\"button-group\">\n                        <button className=\"button--default\" onClick={this.props.startGame}>Start Game</button>\n                    </div>\n                    }\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nimport './Chat.css';\n\nexport default class Chat extends Component {\n\n    constructor(props) {\n        super(props);\n        this.messageContent = React.createRef();\n    }\n\n    sendMessage = e => {\n        e.preventDefault();\n        this.props.socket.emit(\"receive message\", {code: this.props.code, content: this.messageContent.current.value});\n        this.messageContent.current.value = '';\n    }\n\n    scrollToBottom = () => {\n        this.chatEnd.scrollIntoView({behavior: \"smooth\"});\n    }\n\n    componentDidUpdate(prevProps) {\n        if(prevProps.messages !== this.props.messages) {\n            this.scrollToBottom();\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"chat\">\n                <div className=\"chat__messages\">\n                    {this.props.messages.map(message => {\n                        return(\n                                <div className=\"chat__message\">\n                                    <span className=\"chat__message__author\" style={message.author === 'System' ? {color: 'red'} : {}}>{message.author}</span>: {message.content}\n                                </div>\n                        )\n                    })}\n                    <div ref={(el) => { this.chatEnd = el; }}>\n                    </div>\n                </div>\n                <form className=\"chat__submit\">\n                    <input className=\"chat__submit__input\" placeholder=\"Start typing...\" ref={this.messageContent} />\n                    <button className=\"chat__submit__button\" onClick={this.sendMessage} type=\"submit\">Send</button>\n                </form>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nimport Chat from './Chat';\n\nimport './Round.css';\n\n\nexport default class Round extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.clue = React.createRef();\n    }\n\n    submitWord = e => {\n        e.preventDefault();\n        if(this.clue.current.value !== '') {\n            this.props.socket.emit('word submitted', {code: this.props.code, word: this.clue.current.value});\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"main-container --round\">\n                    <div className=\"round__topic\">\n                        <div className=\"round__topic__title\">{this.props.topic.topic}</div>\n                        {\n                            this.props.topic.words.map(word => {\n                                if(this.props.secretWord === word) {\n                                    return <div className=\"round__topic__word highlighted\">{word}</div>\n                                } else {\n                                    return <div className=\"round__topic__word\">{word}</div>\n                                }\n                            })\n                        }\n                    </div>\n\n                    {this.props.isChameleon && \n                        <div>\n                            <h3>You are the</h3> \n                            <h2>CHAMELEON</h2>\n                        </div>\n                    }\n\n                    {!this.props.isChameleon && \n                        <div>\n                            <h3>The secret word is</h3>\n                            {this.props.secretWord && <h2>{this.props.secretWord.toUpperCase()}</h2>}\n                        </div>\n                    }\n                    <div className=\"round__timer\">{this.props.currentTurn} has {this.props.timer} seconds to answer.</div>\n                    {this.props.isMyTurn === true &&\n                        <form className=\"form-group\">\n                            <label>Your clue:</label>\n                            <input maxLength=\"36\" ref={this.clue} />\n                            <button className=\"button--default\" onClick={this.submitWord} type=\"submit\">Submit</button>\n                        </form>\n                    }\n                    <Chat messages={this.props.messages} code={this.props.code} socket={this.props.socket} />\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nexport default class Clue extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {clueSelected: false};\n    }\n    componentDidUpdate() {\n        if(this.props.timer === 0) {\n            console.log('Votes being sent in!');\n        }\n    }\n\n    selectClue = () => {\n        this.props.selectClue(this.props.id);\n    }\n\n    render() {\n        return (\n            <div className={this.props.selectedClue === this.props.id ? \"vote__info vote__info__selected\" : \"vote__info\"} onClick={this.selectClue}>\n                <span className=\"vote__info__playername\">{this.props.player.name}</span>\n                <span className=\"vote__info__playeranswer\">{this.props.player.answer.length > 0 ? this.props.player.answer : 'N/A'}</span>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nimport Chat from './Chat';\nimport Clue from './Clue';\nimport './Vote.css';\n\nexport default class Vote extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {showVote: true};\n    }\n\n    toggleVote = () => {\n        this.setState({showVote: !this.state.showVote})\n    }\n\n    selectClue = selectedClue => {\n        this.setState({selectedClue});\n        this.props.placeVote(selectedClue);\n    }\n\n    render() {\n        return (\n            <div className=\"main-container --vote\">\n                <h2>It's time to vote!</h2>\n                {this.props.tieBreaker && <h2>TIE BREAKER!</h2>}\n                <h2>{this.props.timer}</h2>\n                <div className=\"vote__container\">\n                    <div className={this.state.showVote ? \"vote__info__container\" : \"--hidden\"}>\n                        {this.props.playerAnswers.map(player => {\n                            if(player.id !== this.props.playerId)  {\n                                return(\n                                    <Clue player={player} timer={this.props.timer} id={player.id} key={player.id} selectClue={this.selectClue} selectedClue={this.state.selectedClue} />\n                                )\n                            } else {\n                                return(<></>);\n                            }\n                        })}\n                    </div>\n\n                    <div className={!this.state.showVote ? \"round__topic\" : \"--hidden\"}>\n                        <div className=\"round__topic__title\">{this.props.topic.topic}</div>\n                        {\n                            this.props.topic.words.map(word => {\n                                if(this.props.secretWord === word) {\n                                    return <div className=\"round__topic__word highlighted\">{word}</div>\n                                } else {\n                                    return <div className=\"round__topic__word\">{word}</div>\n                                }\n                            })\n                        }\n                    </div>\n                    <div className=\"vote__selection-box\">\n                        <div className={this.state.showVote ? \"vote__selection--enabled\" : \"vote__selection--disabled\"} onClick={this.toggleVote}>Clues</div>\n                        <div className={!this.state.showVote ? \"vote__selection--enabled\" : \"vote__selection--disabled\"} onClick={this.toggleVote}>Topic</div>\n                    </div>\n                </div>\n                <Chat messages={this.props.messages} code={this.props.code} socket={this.props.socket} />\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nimport Chat from './Chat';\n\nexport default class Results extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            voteCorrect: false,\n            topics: [],\n        };\n    }\n\n    async componentDidMount() {\n        if(this.props.chameleon === this.props.winningPlayer) {\n            this.setState({voteCorrect: true});\n        }\n\n        let data = await fetch('/topics');\n        let topics = await data.json();\n        topics.sort();\n        topics.unshift('Random');\n        this.setState({topics});\n    }\n\n    render() {\n        return (\n            <div className=\"main-container --results\">\n                {!this.props.isChameleon &&\n                    <>\n                        <h2>The results are in!</h2>\n                        <p>You thought the chameleon was <strong>{this.props.winningPlayer}</strong>.</p>\n                        <p>And the chameleon was actually...</p>\n                        <h1>{this.props.chameleon}</h1>\n                    </>\n                }\n\n                {this.props.isChameleon && this.state.voteCorrect && \n                    <>\n                        <h2>You've been found!</h2>\n                        <p>Do you know what the secret word was?</p>\n                    </>\n                }\n\n                {this.props.isChameleon && !this.state.voteCorrect &&\n                    <>\n                        <h2>You got away this time!</h2>\n                    </>\n                }\n                {this.props.isHost &&\n                    <>\n                        <div className=\"results__form-group\">\n                            <label>Topic</label>\n                            <select onChange={this.props.changeTopic}>\n                                {this.state.topics.map(topic => {\n                                    return (<option value={topic} key={topic}>{topic}</option>);\n                                })\n                                }\n                            </select>\n                        </div>\n                        <div className=\"button-group\">\n                            <button className=\"button--default\" onClick={this.props.startGame}>New Game?</button>\n                        </div>\n                    </>\n                }\n                <Chat messages={this.props.messages} code={this.props.code} socket={this.props.socket} />\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nimport './AskingName.css';\n\nexport default class AskingName extends Component {\n\n    constructor(props) {\n        super(props);\n\n    }\n    joinGame = () => {\n        this.props.login()\n        this.props.renderPage('splash');\n    }\n    render() {\n        return (\n            <div>\n                <div className=\"main-container --splash\">\n                    <div className=\"brand\">\n                        <h1>Chameleon</h1>\n                    </div>\n                    <div className=\"button-group\">\n                    <div>\n                                <label>Name</label>\n                                <input onChange={this.props.changeName} />\n                            </div>\n                            <button className=\"button--default\" onClick={this.joinGame}>GO</button>\n\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from \"react\";\nimport io from \"socket.io-client\";\n\nimport Splash from \"./components/Splash\";\nimport CreateGame from \"./components/CreateGame\";\nimport JoinGame from \"./components/JoinGame\";\nimport Lobby from \"./components/Lobby\";\nimport Round from \"./components/Round\";\nimport Vote from \"./components/Vote\";\nimport Results from \"./components/Results\";\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/firestore\";\nimport { doc, onSnapshot, setDoc,getDoc } from \"firebase/firestore\";\nimport { IO } from \"./objects/io\";\nimport {Player} from './objects/player'\nimport AskingName from \"./components/AskingName\";\n\n// Initialize Firebase\n// Copy the config from your own Firebase app\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCA7kl97Ip7NPUCQdtrb7HG_tYZiillaVg\",\n  authDomain: \"airplane-shooting.firebaseapp.com\",\n  databaseURL: \"https://airplane-shooting.firebaseio.com\",\n  projectId: \"airplane-shooting\",\n  storageBucket: \"airplane-shooting.appspot.com\",\n  messagingSenderId: \"758825287318\",\n  appId: \"1:758825287318:web:df02c234565efbdff00cb7\",\n};\n\nvar app = firebase.initializeApp(firebaseConfig);\nvar db = firebase.firestore();\n\n// enable vibration support\nnavigator.vibrate =\n  navigator.vibrate ||\n  navigator.webkitVibrate ||\n  navigator.mozVibrate ||\n  navigator.msVibrate;\n\nconst socketUrl =\n  process.env.NODE_ENV !== \"production\"\n    ? process.env.SOCKET_URL\n    : \"https://chameleon.jwayne.dev/\";\n\n    function getCookie(cname) {\n        let name = cname + \"=\";\n        let decodedCookie = decodeURIComponent(document.cookie);\n        let ca = decodedCookie.split(';');\n        for(let i = 0; i <ca.length; i++) {\n          let c = ca[i];\n          while (c.charAt(0) == ' ') {\n            c = c.substring(1);\n          }\n          if (c.indexOf(name) == 0) {\n            return c.substring(name.length, c.length);\n          }\n        }\n        return \"\";\n      }\n\nfunction setCookie(cname, cvalue, exdays) {\n    const d = new Date();\n    d.setTime(d.getTime() + (exdays*24*60*60*1000));\n    let expires = \"expires=\"+ d.toUTCString();\n    document.cookie = cname + \"=\" + cvalue + \";\" + expires + \";path=/\";\n    }\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      db: db,\n      socket: null,\n      id: \"\",\n      rendered: \"askingname\",\n      isHost: false,\n      playerName: null,\n      players: [],\n      code: \"\",\n      message: \"\",\n      topic: {},\n      timer: 0,\n      currentTurn: \"\",\n      showAlert: false,\n      alert: \"\",\n      messages: [],\n      playerAnswers: [],\n      vote: \"\",\n      isChameleon: false,\n      tieBreaker: false,\n      selectedTopic: null,\n      io: new IO()\n    };\n  }\n\n  async componentDidMount() {\n    let id_chamelon=getCookie(\"id_chamelon\")\n    if (id_chamelon.length==0){\n        let new_id=Math.floor(Math.random() * 1000)\n        setCookie(\"id_chamelon\", new_id,1);\n        id_chamelon=new_id\n        this.setState({playerId: id_chamelon});\n    } \n    else {\n        const docRef = doc(db, \"players_online\", id_chamelon);\n        const docSnap = await getDoc(docRef);\n\n        if (docSnap.exists()) {\n            console.log(\"Document data:\", docSnap.data());\n            let player = docSnap.data();\n            this.setState({player:player, playerName:player.name,playerId: id_chamelon})\n            this.renderPage('splash');\n        } else {\n        // doc.data() will be undefined in this case\n        console.log(\"No such document!\");\n        }\n\n    }\n    \n    this.initSocket();\n  }\n\n  createAlert = (message) => {\n    this.setState({\n      messages: [\n        ...this.state.messages,\n        { author: \"System\", content: message },\n      ],\n    });\n  };\n\n  initSocket = () => {\n    const unsub = onSnapshot(doc(db, \"events\", \"SF\"), (doc) => {\n      console.log(\"Current data: \", doc.data());\n      let event1 = doc.data();\n      if(event1==undefined ){\n        return\n      }\n      switch (event1.name) {\n        // case \"new game\":\n        //   this.setState({\n        //     code: data.code,\n        //     isHost: true,\n        //     playerId: data.playerId,\n        //   });\n        //   break;\n        // case \"game joined\":\n        //   this.setState({ code: data.code, playerId: data.playerId });\n        //   break;\n        case \"chameleon\":\n            this.setState({isChameleon: true});\n            break;\n        case \"start vote\":\n            this.setState({playerAnswers: event1.data, rendered: 'vote'})\n            break;\n        case \"answers in\":\n            this.setState({playerAnswers: event1.data})\n            break;\n        case \"tie breaker\":\n            this.setState({tieBreaker: true});\n            break;\n        case \"results\":\n            this.setState({chameleon: event1.data.chameleon, winningPlayer: event1.data.winningPlayer});\n            this.renderPage('results');\n            break;\n        case \"game started\":\n          this.setState({\n            message: \"\",\n            timer: 0,\n            currentTurn: \"\",\n            playerAnswers: [],\n            vote: \"\",\n            isChameleon: false,\n            tieBreaker: false,\n          });\n          if (event1.data.playerType !== \"chameleon\") {\n            this.setState({ topic: event1.data.topic, secretWord: event1.data.secretWord });\n            this.renderPage(\"round\");\n          } else {\n            this.setState({ topic: event1.data.topic });\n            this.renderPage(\"round\");\n          }\n          break;\n        default:\n        // code block\n      }\n    });\n\n    // const socket = io(socketUrl);\n    // socket.on('connect', () => {\n    //     console.log('Connected to host.');\n    // });\n\n    // socket.on('new game', data => {\n    //     this.setState({code: data.code, isHost: true, playerId: data.playerId});\n    // });\n\n    // socket.on('game joined', data => {\n    //     this.setState({code: data.code, playerId: data.playerId });\n    // });\n\n    // socket.on('leave game', data => {\n    //     this.setState({message: data.message || ''});\n    //     this.leaveGame(socket);\n    // });\n\n    // socket.on(\"update players\", (players) => {\n    //     this.setState({players})\n    // });\n\n    // socket.on(\"update timer\", timer => {\n    //     this.setState({timer});\n    // })\n\n    // socket.on(\"error\", message => {\n    //     this.setState({message});\n    // })\n\n    // socket.on(\"game started\", data => {\n    //     this.setState({\n    //         message: '',\n    //         timer: 0,\n    //         currentTurn: '',\n    //         playerAnswers: [],\n    //         vote: '',\n    //         isChameleon: false,\n    //         tieBreaker: false\n    //     });\n    //     if(data.playerType !== 'chameleon'){\n    //         this.setState({topic: data.topic, secretWord: data.secretWord});\n    //         this.renderPage('round');\n    //     } else {\n    //         this.setState({topic: data.topic});\n    //         this.renderPage('round');\n    //     }\n    // });\n\n    // socket.on(\"my turn\", () => {\n    //     this.setState({isMyTurn: true});\n    //     if (navigator.vibrate) {\n    //         navigator.vibrate(3000);\n    //     }\n    // });\n\n    // socket.on(\"chameleon\", () => {\n    //     this.setState({isChameleon: true});\n    // })\n\n    // socket.on(\"turn over\", () => {\n    //     this.setState({isMyTurn: false});\n    // });\n\n    // socket.on(\"alert\", data => {\n    //     this.createAlert(data.message);\n    // });\n\n    // socket.on(\"current turn\", playerName => {\n    //     this.setState({currentTurn: playerName})\n    // });\n\n    // socket.on(\"receive message\", data => {\n    //     this.setState({messages: [ ...this.state.messages, {author: data.author, content: data.content }]})\n    // });\n\n    // socket.on(\"start vote\", answers => {\n    //     this.setState({playerAnswers: answers, rendered: 'vote'})\n    // });\n\n    // socket.on(\"answers in\", data => {\n    //     this.setState({playerAnswers: data})\n    // });\n\n    // socket.on(\"tie breaker\", () => {\n    //     this.setState({tieBreaker: true});\n    // })\n\n    // socket.on(\"results\", data => {\n    //     this.setState({chameleon: data.chameleon, winningPlayer: data.winningPlayer});\n    //     this.renderPage('results');\n    // })\n  };\n   login = async () => {\n    let player = new Player(this.state.playerName,this.state.playerId);\n    await setDoc(doc(db, \"players_online\", player.player_id),player.toJSON());\n  };\n\n  setCode = (code) => {\n    this.setState({ code });\n  };\n\n  setMessage = (message) => {\n    this.setState({ message });\n  };\n\n  leaveGame = (socket) => {\n    socket.emit(\"leave game\");\n    this.setState({\n      rendered: \"askingname\",\n      isHost: false,\n      players: [],\n      code: \"\",\n      message: \"\",\n      topic: {},\n      timer: 0,\n      currentTurn: \"\",\n      showAlert: false,\n      alert: \"\",\n      messages: [],\n      playerAnswers: [],\n      playerId: \"\",\n      vote: \"\",\n      isChameleon: false,\n      tieBreaker: false,\n      selectedTopic: \"\",\n    });\n  };\n\n  renderPage = (page) => {\n    this.setState({\n      rendered: page,\n    });\n  };\n  changeName = e => {\n    this.setState({playerName: e.target.value});\n}\n\n  startGame = () => {\n    if (this.state.players.length > 2) {\n      this.state.socket.emit(\"start game\", {\n        code: this.state.code,\n        topic: this.state.selectedTopic ? this.state.selectedTopic : null,\n      });\n    }\n  };\n\n  placeVote = (id) => {\n    this.setState({ vote: id });\n    this.state.socket.emit(\"place vote\", { code: this.state.code, id });\n  };\n\n  changeTopic = (e) => {\n    this.setState({ selectedTopic: e.target.value });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n         {this.state.rendered === \"askingname\" && (\n          <AskingName renderPage={this.renderPage} changeName={this.changeName} login={this.login} />\n        )}\n        {this.state.rendered === \"splash\" && (\n          <Splash renderPage={this.renderPage} name={this.state.playerName} />\n        )}\n        {this.state.rendered === \"create\" && (\n          <CreateGame\n            renderPage={this.renderPage}\n            db={this.state.db}\n            setHost={this.setHost}\n          />\n        )}\n        {this.state.rendered === \"join\" && (\n          <JoinGame\n            renderPage={this.renderPage}\n            socket={this.state.socket}\n            message={this.state.message}\n            setMessage={this.setMessage}\n            setCode={this.setCode}\n          />\n        )}\n        {this.state.rendered === \"lobby\" && (\n          <Lobby\n            renderPage={this.renderPage}\n            socket={this.state.socket}\n            isHost={this.state.isHost}\n            code={this.state.code}\n            players={this.state.players}\n            leaveGame={this.leaveGame}\n            startGame={this.startGame}\n          />\n        )}\n        {this.state.rendered === \"round\" && (\n          <Round\n            isChameleon={this.state.isChameleon}\n            renderPage={this.renderPage}\n            messages={this.state.messages}\n            socket={this.state.socket}\n            code={this.state.code}\n            playerType={this.state.playerType}\n            currentTurn={this.state.currentTurn}\n            topic={this.state.topic}\n            secretWord={this.state.secretWord}\n            isMyTurn={this.state.isMyTurn}\n            timer={this.state.timer}\n          />\n        )}\n        {this.state.rendered === \"vote\" && (\n          <Vote\n            tieBreaker={this.state.tieBreaker}\n            placeVote={this.placeVote}\n            renderPage={this.renderPage}\n            messages={this.state.messages}\n            socket={this.state.socket}\n            code={this.state.code}\n            playerAnswers={this.state.playerAnswers}\n            topic={this.state.topic}\n            secretWord={this.state.secretWord}\n            timer={this.state.timer}\n            playerId={this.state.playerId}\n          />\n        )}\n        {this.state.rendered === \"results\" && (\n          <Results\n            messages={this.state.messages}\n            socket={this.state.socket}\n            isHost={this.state.isHost}\n            code={this.state.code}\n            chameleon={this.state.chameleon}\n            startGame={this.startGame}\n            winningPlayer={this.state.winningPlayer}\n            isChameleon={this.state.isChameleon}\n            topic={this.selectedTopic}\n            changeTopic={this.changeTopic}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}